<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="motion_planner_8c" kind="file" language="C++">
    <compoundname>motionPlanner.c</compoundname>
    <innerclass refid="struct_p_i_d" prot="public">PID</innerclass>
    <innerclass refid="structmotion_profiler" prot="public">motionProfiler</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="motion_planner_8c_1a0539e40392ac567049e64b8702a1a679" prot="public" static="no">
        <name>TRUESPEED_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="2" column="9" bodyfile="motionPlanner.c" bodystart="2" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="motion_planner_8c_1a921a68decd8b7a0286f657e4f2839ff0" prot="public" static="no">
        <name>NERD_PID_h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="27" column="9" bodyfile="motionPlanner.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="motion_planner_8c_1a56d8cc7537790863f0284e50c4c78ce6" prot="public" static="no">
        <name>PID_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="48" column="9" bodyfile="motionPlanner.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="motion_planner_8c_1a9a8deb415b6818184cd925709e01f3ea" prot="public" static="no">
        <name>NERD_MOTIONPLANNER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="195" column="9" bodyfile="motionPlanner.c" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="motion_planner_8c_1a229bfa76ac5d7171767faff966659a13" prot="public" static="no" mutable="no">
        <type>const unsigned int</type>
        <definition>const unsigned int TrueSpeed[128]</definition>
        <argsstring>[128]</argsstring>
        <name>TrueSpeed</name>
        <initializer>=
{
  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
  0, 21, 21, 21, 22, 22, 22, 23, 24, 24,
 25, 25, 25, 25, 26, 27, 27, 28, 28, 28,
 28, 29, 30, 30, 30, 31, 31, 32, 32, 32,
 33, 33, 34, 34, 35, 35, 35, 36, 36, 37,
 37, 37, 37, 38, 38, 39, 39, 39, 40, 40,
 41, 41, 42, 42, 43, 44, 44, 45, 45, 46,
 46, 47, 47, 48, 48, 49, 50, 50, 51, 52,
 52, 53, 54, 55, 56, 57, 57, 58, 59, 60,
 61, 62, 63, 64, 65, 66, 67, 67, 68, 70,
 71, 72, 72, 73, 74, 76, 77, 78, 79, 79,
 80, 81, 83, 84, 84, 86, 86, 87, 87, 88,
 88, 89, 89, 90, 90,127,127,127
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TrueSpeed lookup table maps linear motor input to logarithmic motor output in order to improve motor control </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="8" column="1" bodyfile="motionPlanner.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="motion_planner_8c_1ad0aa61a5b536a3d2a6ead32363ae339c" prot="public" static="no" mutable="no">
        <type><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref></type>
        <definition>motionProfiler profilerPool[10]</definition>
        <argsstring>[10]</argsstring>
        <name>profilerPool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="232" column="1" bodyfile="motionPlanner.c" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="motion_planner_8c_1a62e1ed7ee302e5c0fbaad855569d20d2" prot="public" static="no" mutable="no">
        <type><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref> *</type>
        <definition>motionProfiler* motorController[10]</definition>
        <argsstring>[10]</argsstring>
        <name>motorController</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="233" column="1" bodyfile="motionPlanner.c" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="motion_planner_8c_1ab65ef0e079d87415d63002863f3b878c" prot="public" static="no" mutable="no">
        <type><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref> *</type>
        <definition>motionProfiler* uniqueControllers[10]</definition>
        <argsstring>[10]</argsstring>
        <name>uniqueControllers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="234" column="1" bodyfile="motionPlanner.c" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="motion_planner_8c_1a228e60e820f1596a54d9bd830adf2fe6" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int rawSensorValue[20]</definition>
        <argsstring>[20]</argsstring>
        <name>rawSensorValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="237" column="1" bodyfile="motionPlanner.c" bodystart="237" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="motion_planner_8c_1ad6e45f67f53a6a3eec3fbd3c0e03d9e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pidInit</definition>
        <argsstring>(PID pid, float Kp, float Ki, float Kd, float innerIntegralBand, float outerIntegralBand)</argsstring>
        <name>pidInit</name>
        <param>
          <type><ref refid="struct_p_i_d" kindref="compound">PID</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Kp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Ki</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Kd</declname>
        </param>
        <param>
          <type>float</type>
          <declname>innerIntegralBand</declname>
        </param>
        <param>
          <type>float</type>
          <declname>outerIntegralBand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize pid structure, set parameters</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>instance of <ref refid="struct_p_i_d" kindref="compound">PID</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Kp</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_p_i_d" kindref="compound">PID</ref> Kp constant </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ki</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_p_i_d" kindref="compound">PID</ref> Ki constant </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Kd</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_p_i_d" kindref="compound">PID</ref> Kd constant </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>innerIntegralBand</parametername>
</parameternamelist>
<parameterdescription>
<para>inner bound of <ref refid="struct_p_i_d" kindref="compound">PID</ref> I summing cutoff </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outerIntegralBand</parametername>
</parameternamelist>
<parameterdescription>
<para>outer bound of <ref refid="struct_p_i_d" kindref="compound">PID</ref> I summing cutoff </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="61" column="1" bodyfile="motionPlanner.c" bodystart="61" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a3716b050fba96285a13502b79d13795c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pidInit</definition>
        <argsstring>(PID pid, PID toCopy)</argsstring>
        <name>pidInit</name>
        <param>
          <type><ref refid="struct_p_i_d" kindref="compound">PID</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="struct_p_i_d" kindref="compound">PID</ref></type>
          <declname>toCopy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialize pid structure, set parameters based on another <ref refid="struct_p_i_d" kindref="compound">PID</ref> structure</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>instance of <ref refid="struct_p_i_d" kindref="compound">PID</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toCopy</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_p_i_d" kindref="compound">PID</ref> instance to copy settings from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="78" column="1" bodyfile="motionPlanner.c" bodystart="78" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a55c32f7660c964a71e288c9efe3a962a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float pidCalculate</definition>
        <argsstring>(PID pid, int setPoint, int processVariable)</argsstring>
        <name>pidCalculate</name>
        <param>
          <type><ref refid="struct_p_i_d" kindref="compound">PID</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>setPoint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>processVariable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculate pid output</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>instance of <ref refid="struct_p_i_d" kindref="compound">PID</ref> structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>setPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>set point of <ref refid="struct_p_i_d" kindref="compound">PID</ref> controller </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>processVariable</parametername>
</parameternamelist>
<parameterdescription>
<para>sensor/feedback value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>output value of the control loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="99" column="1" bodyfile="motionPlanner.c" bodystart="99" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1aea4332a3ded7a93261d8c53e0b83d277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float pidCalculateWithVelocitySet</definition>
        <argsstring>(PID pid, int setPoint, int processVariable, int velocitySet)</argsstring>
        <name>pidCalculateWithVelocitySet</name>
        <param>
          <type><ref refid="struct_p_i_d" kindref="compound">PID</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>setPoint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>processVariable</declname>
        </param>
        <param>
          <type>int</type>
          <declname>velocitySet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculate <ref refid="struct_p_i_d" kindref="compound">PID</ref> output while velocity control is active. The velocity set point will be subtracted from the time derivative of the error</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_p_i_d" kindref="compound">PID</ref> controller to use for the calculation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>setPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>the set point of the system </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>processVariable</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the feedback sensor in the system </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocitySet</parametername>
</parameternamelist>
<parameterdescription>
<para>the velocity set point of the system</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output value of the control loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="134" column="1" bodyfile="motionPlanner.c" bodystart="134" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1acb752ade99450cfce2f7e7ad3f80e9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float pidCalculateVelocity</definition>
        <argsstring>(PID pid, int setPoint, int processVariable)</argsstring>
        <name>pidCalculateVelocity</name>
        <param>
          <type><ref refid="struct_p_i_d" kindref="compound">PID</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>setPoint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>processVariable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculate <ref refid="struct_p_i_d" kindref="compound">PID</ref> output for velocity control using feedforward instead of an error calculation, but still allowing for I and D components.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="struct_p_i_d" kindref="compound">PID</ref> controller to use for the calculation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>setPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>the set point of the system </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>processVariable</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the feedback sensor in the system</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the output value of the control loop </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="168" column="1" bodyfile="motionPlanner.c" bodystart="168" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1ac842b4b04041e6a1ca5dfbf4e8652bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* getRawSensor</definition>
        <argsstring>(int port)</argsstring>
        <name>getRawSensor</name>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return a pointer to a ROBOTC sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>the sensor value to get a pointer to</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pointer to the sensor value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="247" column="1" bodyfile="motionPlanner.c" bodystart="247" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a1b9b6097dd7e4e65093c30e080a19ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createMotionProfile</definition>
        <argsstring>(int motorPort, int *sensor, int vMax, float Ka, int t1, int t2, int cycleTime, int positionCycles)</argsstring>
        <name>createMotionProfile</name>
        <param>
          <type>int</type>
          <declname>motorPort</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vMax</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Ka</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cycleTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>positionCycles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a motion profile for a motor/sensor pair. <ref refid="struct_p_i_d" kindref="compound">PID</ref> controllers for the motion profile will be set to default with 0 feedback control and a neutral feedforward gain of 127.0/vMax</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>motorPort</parametername>
</parameternamelist>
<parameterdescription>
<para>the motor port to create a profile for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the sensor value to monitor. This can be a pointer to any integer, or a &quot;raw&quot; sensor value using <ref refid="motion_planner_8c_1ac842b4b04041e6a1ca5dfbf4e8652bea" kindref="member">getRawSensor()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vMax</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum velocity to use when calculating moves </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ka</parametername>
</parameternamelist>
<parameterdescription>
<para>acceleration constant used when ramping up/down velocity during moves </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t1</parametername>
</parameternamelist>
<parameterdescription>
<para>time to spend at peak acceleration at the beginning/end of a move. This and t2 will determine the shape of the motion curve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t2</parametername>
</parameternamelist>
<parameterdescription>
<para>time to spend at peak jerk (time derivative of acceleration) at the beginning/end of acceleration. Time to get from 0 to max velocity (or max to 0) = t1 + 2*t2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cycleTime</parametername>
</parameternamelist>
<parameterdescription>
<para>polling rate/sample period of system. Polling frequency = 1000/cycleTime. Note that ports 2-9 on cortex only can update at a frequency of 18.5Hz, so values less than ~20 here will offer diminishing returns. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positionCycles</parametername>
</parameternamelist>
<parameterdescription>
<para>cycles to skip for position updates during moves. This will generally be 3-5 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="266" column="1" bodyfile="motionPlanner.c" bodystart="266" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a31cfbe0e8576c0a0ea7d6109d092b604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createMotionProfile</definition>
        <argsstring>(int motorPort, int *sensor, int vMax)</argsstring>
        <name>createMotionProfile</name>
        <param>
          <type>int</type>
          <declname>motorPort</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create a motion profile for a motor/sensor pair using default timing settings and a Ka of 0. This will provide simple feedforward position/velocity control</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>motorPort</parametername>
</parameternamelist>
<parameterdescription>
<para>the motor port to create a profile for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the sensor value to monitor. This can be a pointer to any integer, or a &quot;raw&quot; sensor value using <ref refid="motion_planner_8c_1ac842b4b04041e6a1ca5dfbf4e8652bea" kindref="member">getRawSensor()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vMax</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum velocity to use when calculating moves </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="324" column="1" bodyfile="motionPlanner.c" bodystart="324" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a30ce5d795dc46d722f83c97fde8d3198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPositionController</definition>
        <argsstring>(int motorPort, float Kp, float Ki, float Kd, float innerBand, float outerBand)</argsstring>
        <name>setPositionController</name>
        <param>
          <type>int</type>
          <declname>motorPort</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Kp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Ki</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Kd</declname>
        </param>
        <param>
          <type>float</type>
          <declname>innerBand</declname>
        </param>
        <param>
          <type>float</type>
          <declname>outerBand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the position <ref refid="struct_p_i_d" kindref="compound">PID</ref> controller for the specified motor&apos;s motion profile</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>motorPort</parametername>
</parameternamelist>
<parameterdescription>
<para>the motor to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Kp</parametername>
</parameternamelist>
<parameterdescription>
<para>proportional gain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ki</parametername>
</parameternamelist>
<parameterdescription>
<para>integral gain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Kd</parametername>
</parameternamelist>
<parameterdescription>
<para>derivative gain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>innerBand</parametername>
</parameternamelist>
<parameterdescription>
<para>the inner integral deadBand value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outerBand</parametername>
</parameternamelist>
<parameterdescription>
<para>the outer integral deadBand value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="339" column="1" bodyfile="motionPlanner.c" bodystart="339" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a84c067f5b749396c97f339e18b3916dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setVelocityController</definition>
        <argsstring>(int motorPort, float Kp, float Ki, float Kd, float innerBand, float outerBand)</argsstring>
        <name>setVelocityController</name>
        <param>
          <type>int</type>
          <declname>motorPort</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Kp</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Ki</declname>
        </param>
        <param>
          <type>float</type>
          <declname>Kd</declname>
        </param>
        <param>
          <type>float</type>
          <declname>innerBand</declname>
        </param>
        <param>
          <type>float</type>
          <declname>outerBand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the velocity <ref refid="struct_p_i_d" kindref="compound">PID</ref> controller for the specified motor&apos;s motion profile</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>motorPort</parametername>
</parameternamelist>
<parameterdescription>
<para>the motor to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Kp</parametername>
</parameternamelist>
<parameterdescription>
<para>proportional gain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ki</parametername>
</parameternamelist>
<parameterdescription>
<para>integral gain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Kd</parametername>
</parameternamelist>
<parameterdescription>
<para>derivative gain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>innerBand</parametername>
</parameternamelist>
<parameterdescription>
<para>the inner integral deadBand value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outerBand</parametername>
</parameternamelist>
<parameterdescription>
<para>the outer integral deadBand value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="358" column="1" bodyfile="motionPlanner.c" bodystart="358" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a98a294f0bd0e05a06e4b3ce91fd3b768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMotionSlave</definition>
        <argsstring>(int motorPort, int masterPort)</argsstring>
        <name>setMotionSlave</name>
        <param>
          <type>int</type>
          <declname>motorPort</declname>
        </param>
        <param>
          <type>int</type>
          <declname>masterPort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set a motor to copy another motor&apos;s motion profile and mirror its output value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>motorPort</parametername>
</parameternamelist>
<parameterdescription>
<para>the motor to have mirror another motor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>masterPort</parametername>
</parameternamelist>
<parameterdescription>
<para>the motor to mirror </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="374" column="1" bodyfile="motionPlanner.c" bodystart="374" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a14723e38e593eefa92500a993303da0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPosition</definition>
        <argsstring>(int motorPort, int position)</argsstring>
        <name>setPosition</name>
        <param>
          <type>int</type>
          <declname>motorPort</declname>
        </param>
        <param>
          <type>int</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>issue a move command to the specified position. This will currently do nothing if the move is considered to be a &quot;short move&quot;, ie. the motor is unable to fully ramp up to max velocity during the move. Note that this is an absolute position command, so two consecutive moves to 4000 are not equivalent to a single move to 8000.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>motorPort</parametername>
</parameternamelist>
<parameterdescription>
<para>the motor to issue the move command to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>the position to move to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="388" column="1" bodyfile="motionPlanner.c" bodystart="388" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a22e3be616dbc3c49d64c1be6c3d912fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setPWMOutput</definition>
        <argsstring>(int motorPort, int output)</argsstring>
        <name>setPWMOutput</name>
        <param>
          <type>int</type>
          <declname>motorPort</declname>
        </param>
        <param>
          <type>int</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set a motor&apos;s output to a value from -127 to 127</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>motorPort</parametername>
</parameternamelist>
<parameterdescription>
<para>the motor to set the output value of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output value to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="423" column="1" bodyfile="motionPlanner.c" bodystart="423" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a6bfe725c4f5986245fba04d84ba9a725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setVelocity</definition>
        <argsstring>(int motorPort, int velocity)</argsstring>
        <name>setVelocity</name>
        <param>
          <type>int</type>
          <declname>motorPort</declname>
        </param>
        <param>
          <type>int</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set a motor&apos;s velocity to the specified value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>motorPort</parametername>
</parameternamelist>
<parameterdescription>
<para>the motor to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>desired velocity </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="443" column="1" bodyfile="motionPlanner.c" bodystart="443" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a807a87c5df438fde21c1e8213906695b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void updateMotors</definition>
        <argsstring>()</argsstring>
        <name>updateMotors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="454" column="1" bodyfile="motionPlanner.c" bodystart="454" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1ab2c54bc2c4636cb590b1b7675b6ddc03" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void measureVelocity</definition>
        <argsstring>(motionProfiler *profile)</argsstring>
        <name>measureVelocity</name>
        <param>
          <type><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref> *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="472" column="1" bodyfile="motionPlanner.c" bodystart="472" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a00408d576818e5185973f32f718fe368" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void velocityUpdate</definition>
        <argsstring>(motionProfiler *profile)</argsstring>
        <name>velocityUpdate</name>
        <param>
          <type><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref> *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="492" column="1" bodyfile="motionPlanner.c" bodystart="492" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a18e4b5b74e187634ebc0800e119d6fcf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void positionUpdate</definition>
        <argsstring>(motionProfiler *profile)</argsstring>
        <name>positionUpdate</name>
        <param>
          <type><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref> *</type>
          <declname>profile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="507" column="1" bodyfile="motionPlanner.c" bodystart="507" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1a7a8acda92bd2fda1a52531d93313884c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>task</type>
        <definition>task rawSensorMonitor</definition>
        <argsstring>()</argsstring>
        <name>rawSensorMonitor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="556" column="1" bodyfile="motionPlanner.c" bodystart="556" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="motion_planner_8c_1abbcf1c2f53386d0935c1727eff22d2ae" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>task</type>
        <definition>task motionPlanner</definition>
        <argsstring>()</argsstring>
        <name>motionPlanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="motionPlanner.c" line="567" column="1" bodyfile="motionPlanner.c" bodystart="567" bodyend="594"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TRUESPEED_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TRUESPEED_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="motion_planner_8c_1a229bfa76ac5d7171767faff966659a13" kindref="member">TrueSpeed</ref>[128]<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>0,<sp/><sp/>0,<sp/><sp/>0,<sp/><sp/>0,<sp/><sp/>0,<sp/><sp/>0,<sp/><sp/>0,<sp/><sp/>0,<sp/><sp/>0,<sp/><sp/>0,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>0,<sp/>21,<sp/>21,<sp/>21,<sp/>22,<sp/>22,<sp/>22,<sp/>23,<sp/>24,<sp/>24,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/>25,<sp/>25,<sp/>25,<sp/>25,<sp/>26,<sp/>27,<sp/>27,<sp/>28,<sp/>28,<sp/>28,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/>28,<sp/>29,<sp/>30,<sp/>30,<sp/>30,<sp/>31,<sp/>31,<sp/>32,<sp/>32,<sp/>32,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/>33,<sp/>33,<sp/>34,<sp/>34,<sp/>35,<sp/>35,<sp/>35,<sp/>36,<sp/>36,<sp/>37,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/>37,<sp/>37,<sp/>37,<sp/>38,<sp/>38,<sp/>39,<sp/>39,<sp/>39,<sp/>40,<sp/>40,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/>41,<sp/>41,<sp/>42,<sp/>42,<sp/>43,<sp/>44,<sp/>44,<sp/>45,<sp/>45,<sp/>46,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/>46,<sp/>47,<sp/>47,<sp/>48,<sp/>48,<sp/>49,<sp/>50,<sp/>50,<sp/>51,<sp/>52,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/>52,<sp/>53,<sp/>54,<sp/>55,<sp/>56,<sp/>57,<sp/>57,<sp/>58,<sp/>59,<sp/>60,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/>61,<sp/>62,<sp/>63,<sp/>64,<sp/>65,<sp/>66,<sp/>67,<sp/>67,<sp/>68,<sp/>70,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/>71,<sp/>72,<sp/>72,<sp/>73,<sp/>74,<sp/>76,<sp/>77,<sp/>78,<sp/>79,<sp/>79,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/>80,<sp/>81,<sp/>83,<sp/>84,<sp/>84,<sp/>86,<sp/>86,<sp/>87,<sp/>87,<sp/>88,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/>88,<sp/>89,<sp/>89,<sp/>90,<sp/>90,127,127,127</highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NERD_PID_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NERD_PID_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="struct_p_i_d" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kp;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Ki;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kd;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>innerIntegralBand;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>outerIntegralBand;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigma;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lastValue;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lastTime;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lastSetPoint;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}<sp/><ref refid="struct_p_i_d" kindref="compound">PID</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PID_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PID_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="motion_planner_8c_1ad6e45f67f53a6a3eec3fbd3c0e03d9e7" kindref="member">pidInit</ref><sp/>(<ref refid="struct_p_i_d" kindref="compound">PID</ref><sp/>pid,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Ki,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kd,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>innerIntegralBand,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>outerIntegralBand)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a09cfc766a233ad617270562cc4146d07" kindref="member">Kp</ref><sp/>=<sp/>Kp;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a59fac16f568541187ff485c4c47b0ec5" kindref="member">Ki</ref><sp/>=<sp/>Ki;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a98268d71502ba080d88a9b1f50fdbe80" kindref="member">Kd</ref><sp/>=<sp/>Kd;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a032c3f5739e042d209c972fc31e57fe3" kindref="member">innerIntegralBand</ref><sp/>=<sp/>innerIntegralBand;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a02d0ee6d23eee5716d8e390aa387f237" kindref="member">outerIntegralBand</ref><sp/>=<sp/>outerIntegralBand;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a437b26536f3832d38c5d783076d310b1" kindref="member">lastValue</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a22cb446e5271d5d2c4b2e23792fb1966" kindref="member">lastTime</ref><sp/>=<sp/>nPgmTime;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="motion_planner_8c_1ad6e45f67f53a6a3eec3fbd3c0e03d9e7" kindref="member">pidInit</ref><sp/>(<ref refid="struct_p_i_d" kindref="compound">PID</ref><sp/>pid,<sp/><ref refid="struct_p_i_d" kindref="compound">PID</ref><sp/>toCopy)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a09cfc766a233ad617270562cc4146d07" kindref="member">Kp</ref><sp/>=<sp/>toCopy.<ref refid="struct_p_i_d_1a59fac16f568541187ff485c4c47b0ec5" kindref="member">Ki</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a59fac16f568541187ff485c4c47b0ec5" kindref="member">Ki</ref><sp/>=<sp/>toCopy.<ref refid="struct_p_i_d_1a59fac16f568541187ff485c4c47b0ec5" kindref="member">Ki</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a98268d71502ba080d88a9b1f50fdbe80" kindref="member">Kd</ref><sp/>=<sp/>toCopy.<ref refid="struct_p_i_d_1a98268d71502ba080d88a9b1f50fdbe80" kindref="member">Kd</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a032c3f5739e042d209c972fc31e57fe3" kindref="member">innerIntegralBand</ref><sp/>=<sp/>toCopy.<ref refid="struct_p_i_d_1a032c3f5739e042d209c972fc31e57fe3" kindref="member">innerIntegralBand</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a02d0ee6d23eee5716d8e390aa387f237" kindref="member">outerIntegralBand</ref><sp/>=<sp/>toCopy.<ref refid="struct_p_i_d_1a02d0ee6d23eee5716d8e390aa387f237" kindref="member">outerIntegralBand</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a437b26536f3832d38c5d783076d310b1" kindref="member">lastValue</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a22cb446e5271d5d2c4b2e23792fb1966" kindref="member">lastTime</ref><sp/>=<sp/>nPgmTime;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="motion_planner_8c_1a55c32f7660c964a71e288c9efe3a962a" kindref="member">pidCalculate</ref><sp/>(<ref refid="struct_p_i_d" kindref="compound">PID</ref><sp/>pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setPoint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>processVariable)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime<sp/>=<sp/>nPgmTime<sp/>-<sp/>pid.<ref refid="struct_p_i_d_1a22cb446e5271d5d2c4b2e23792fb1966" kindref="member">lastTime</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a22cb446e5271d5d2c4b2e23792fb1966" kindref="member">lastTime</ref><sp/>=<sp/>nPgmTime;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaPV<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deltaTime<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaPV<sp/>=<sp/>(processVariable<sp/>-<sp/>pid.<ref refid="struct_p_i_d_1a437b26536f3832d38c5d783076d310b1" kindref="member">lastValue</ref>)<sp/>/<sp/>deltaTime;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a437b26536f3832d38c5d783076d310b1" kindref="member">lastValue</ref><sp/>=<sp/>processVariable;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>setPoint<sp/>-<sp/>processVariable;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(error)<sp/>&gt;<sp/>pid.<ref refid="struct_p_i_d_1a032c3f5739e042d209c972fc31e57fe3" kindref="member">innerIntegralBand</ref><sp/>&amp;&amp;<sp/>fabs(error)<sp/>&lt;<sp/>pid.<ref refid="struct_p_i_d_1a02d0ee6d23eee5716d8e390aa387f237" kindref="member">outerIntegralBand</ref>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>+=<sp/>error<sp/>*<sp/>deltaTime;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fabs<sp/>(error)<sp/>&gt;<sp/>pid.<ref refid="struct_p_i_d_1a02d0ee6d23eee5716d8e390aa387f237" kindref="member">outerIntegralBand</ref>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>error<sp/>*<sp/>pid.<ref refid="struct_p_i_d_1a09cfc766a233ad617270562cc4146d07" kindref="member">Kp</ref></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>*<sp/>pid.<ref refid="struct_p_i_d_1a59fac16f568541187ff485c4c47b0ec5" kindref="member">Ki</ref></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>deltaPV<sp/>*<sp/>pid.<ref refid="struct_p_i_d_1a98268d71502ba080d88a9b1f50fdbe80" kindref="member">Kd</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="motion_planner_8c_1aea4332a3ded7a93261d8c53e0b83d277" kindref="member">pidCalculateWithVelocitySet</ref><sp/>(<ref refid="struct_p_i_d" kindref="compound">PID</ref><sp/>pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setPoint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>processVariable,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>velocitySet)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime<sp/>=<sp/>nPgmTime<sp/>-<sp/>pid.<ref refid="struct_p_i_d_1a22cb446e5271d5d2c4b2e23792fb1966" kindref="member">lastTime</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a22cb446e5271d5d2c4b2e23792fb1966" kindref="member">lastTime</ref><sp/>=<sp/>nPgmTime;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaPV<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deltaTime<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaPV<sp/>=<sp/>(processVariable<sp/>-<sp/>pid.<ref refid="struct_p_i_d_1a437b26536f3832d38c5d783076d310b1" kindref="member">lastValue</ref>)<sp/>/<sp/>deltaTime<sp/>+<sp/>velocitySet;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a437b26536f3832d38c5d783076d310b1" kindref="member">lastValue</ref><sp/>=<sp/>processVariable;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>setPoint<sp/>-<sp/>processVariable;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(error)<sp/>&gt;<sp/>pid.<ref refid="struct_p_i_d_1a032c3f5739e042d209c972fc31e57fe3" kindref="member">innerIntegralBand</ref><sp/>&amp;&amp;<sp/>fabs(error)<sp/>&lt;<sp/>pid.<ref refid="struct_p_i_d_1a02d0ee6d23eee5716d8e390aa387f237" kindref="member">outerIntegralBand</ref>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>+=<sp/>error<sp/>*<sp/>deltaTime;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fabs<sp/>(error)<sp/>&gt;<sp/>pid.<ref refid="struct_p_i_d_1a02d0ee6d23eee5716d8e390aa387f237" kindref="member">outerIntegralBand</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>error<sp/>*<sp/>pid.<ref refid="struct_p_i_d_1a09cfc766a233ad617270562cc4146d07" kindref="member">Kp</ref></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>*<sp/>pid.<ref refid="struct_p_i_d_1a59fac16f568541187ff485c4c47b0ec5" kindref="member">Ki</ref></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>deltaPV<sp/>*<sp/>pid.<ref refid="struct_p_i_d_1a98268d71502ba080d88a9b1f50fdbe80" kindref="member">Kd</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="motion_planner_8c_1acb752ade99450cfce2f7e7ad3f80e9c6" kindref="member">pidCalculateVelocity</ref><sp/>(<ref refid="struct_p_i_d" kindref="compound">PID</ref><sp/>pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setPoint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>processVariable)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime<sp/>=<sp/>nPgmTime<sp/>-<sp/>pid.<ref refid="struct_p_i_d_1a22cb446e5271d5d2c4b2e23792fb1966" kindref="member">lastTime</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a22cb446e5271d5d2c4b2e23792fb1966" kindref="member">lastTime</ref><sp/>=<sp/>nPgmTime;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaPV<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(deltaTime<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaPV<sp/>=<sp/>(processVariable<sp/>-<sp/>pid.<ref refid="struct_p_i_d_1a437b26536f3832d38c5d783076d310b1" kindref="member">lastValue</ref>)<sp/>/<sp/>deltaTime;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1a437b26536f3832d38c5d783076d310b1" kindref="member">lastValue</ref><sp/>=<sp/>processVariable;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>setPoint<sp/>-<sp/>processVariable;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(error)<sp/>&gt;<sp/>pid.<ref refid="struct_p_i_d_1a032c3f5739e042d209c972fc31e57fe3" kindref="member">innerIntegralBand</ref><sp/>&amp;&amp;<sp/>fabs(error)<sp/>&lt;<sp/>pid.<ref refid="struct_p_i_d_1a02d0ee6d23eee5716d8e390aa387f237" kindref="member">outerIntegralBand</ref>)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>+=<sp/>error<sp/>*<sp/>deltaTime;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(fabs<sp/>(error)<sp/>&gt;<sp/>pid.<ref refid="struct_p_i_d_1a02d0ee6d23eee5716d8e390aa387f237" kindref="member">outerIntegralBand</ref>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>setPoint<sp/>*<sp/>pid.<ref refid="struct_p_i_d_1a09cfc766a233ad617270562cc4146d07" kindref="member">Kp</ref></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>pid.<ref refid="struct_p_i_d_1ae11aeeb83e22b5b7f1e6b4347eb1daa6" kindref="member">sigma</ref><sp/>*<sp/>pid.<ref refid="struct_p_i_d_1a59fac16f568541187ff485c4c47b0ec5" kindref="member">Ki</ref></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>deltaPV<sp/>*<sp/>pid.<ref refid="struct_p_i_d_1a98268d71502ba080d88a9b1f50fdbe80" kindref="member">Kd</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NERD_MOTIONPLANNER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NERD_MOTIONPLANNER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="structmotion_profiler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_p_i_d" kindref="compound">PID</ref><sp/>positionController;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_p_i_d" kindref="compound">PID</ref><sp/>velocityController;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kv;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Ka;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sensor;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>velocityFilter<sp/>[5];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>velocityRead;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>profileSetting;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cycleCounter;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>motorOutput;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>positionOut;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastSensorValue;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastTime;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>finalPosition;<sp/></highlight><highlight class="comment">//target<sp/>position,<sp/>in<sp/>sensor<sp/>units</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>positionSet;<sp/></highlight><highlight class="comment">//position<sp/>set<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocitySet;<sp/></highlight><highlight class="comment">//velocity<sp/>set<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>accelSet;<sp/></highlight><highlight class="comment">//acceleration<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>jerk;<sp/></highlight><highlight class="comment">//rate<sp/>of<sp/>acceleration<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>planComplete;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vMax;<sp/></highlight><highlight class="comment">//max<sp/>rate<sp/>of<sp/>system,<sp/>in<sp/>sensor<sp/>units/second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t1;<sp/></highlight><highlight class="comment">//time<sp/>for<sp/>velocity<sp/>ramping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t2;<sp/></highlight><highlight class="comment">//time<sp/>for<sp/>acceleration<sp/>ramping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t4;<sp/></highlight><highlight class="comment">//estimated<sp/>time<sp/>assuming<sp/>constant<sp/>max<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tMax;<sp/></highlight><highlight class="comment">//total<sp/>estimated<sp/>time<sp/>of<sp/>profile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cycleTime;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>positionCycles;<sp/></highlight><highlight class="comment">//amount<sp/>of<sp/>cycles<sp/>to<sp/>wait<sp/>before<sp/>new<sp/>position<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}<sp/><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/><ref refid="motion_planner_8c_1ad0aa61a5b536a3d2a6ead32363ae339c" kindref="member">profilerPool</ref>[10];<sp/></highlight><highlight class="comment">//<sp/><sp/>because<sp/>of<sp/>ROBOTC<sp/>not<sp/>being<sp/>true<sp/>C<sp/>we<sp/>need<sp/>to<sp/>allocate<sp/>space<sp/>for<sp/>profilers<sp/>at<sp/>compile<sp/>time<sp/>instead<sp/>of<sp/>instantiating<sp/>them<sp/>as<sp/>we<sp/>need<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref>*<sp/><ref refid="motion_planner_8c_1a62e1ed7ee302e5c0fbaad855569d20d2" kindref="member">motorController</ref><sp/>[10];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref>*<sp/><ref refid="motion_planner_8c_1ab65ef0e079d87415d63002863f3b878c" kindref="member">uniqueControllers</ref><sp/>[10];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//sensor<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="motion_planner_8c_1a228e60e820f1596a54d9bd830adf2fe6" kindref="member">rawSensorValue</ref><sp/>[20];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><ref refid="motion_planner_8c_1ac842b4b04041e6a1ca5dfbf4e8652bea" kindref="member">getRawSensor</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port<sp/>&lt;<sp/>0<sp/>||<sp/>port<sp/>&gt;<sp/>19)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="motion_planner_8c_1a228e60e820f1596a54d9bd830adf2fe6" kindref="member">rawSensorValue</ref><sp/>[port];</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><ref refid="motion_planner_8c_1a1b9b6097dd7e4e65093c30e080a19ef1" kindref="member">createMotionProfile</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>motorPort,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sensor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vMax,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Ka,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cycleTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>positionCycles)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorPort<sp/>&lt;<sp/>0<sp/>||<sp/>motorPort<sp/>&gt;<sp/>9)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[motorPort]<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>%<sp/>cycleTime<sp/>!=<sp/>0<sp/>||<sp/>t2<sp/>%<sp/>cycleTime<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/>*controller;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uniqueControllers[i]<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniqueControllers<sp/>[i]<sp/>=<sp/>&amp;(profilerPool<sp/>[i]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>controller<sp/>=<sp/>uniqueControllers<sp/>[i];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>motorController<sp/>[motorPort]<sp/>=<sp/>controller;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1ac45c58330bcdae28978c77a6cfde8f72" kindref="member">sensor</ref><sp/>=<sp/>sensor;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1abab91ecaedaa0da8ff8efb499269ff0a" kindref="member">velocityRead</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1af1c26d55aae953850de4497090f96033" kindref="member">profileSetting</ref><sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1a0f19b669e85c8c71ac80e985351be173" kindref="member">lastSensorValue</ref><sp/>=<sp/>*sensor;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1ab17786ea0ccd57d2b527d06143e22c15" kindref="member">lastTime</ref><sp/>=<sp/>nPgmTime;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1a939c9510d8065a680fb9390dc98c89d9" kindref="member">vMax</ref><sp/>=<sp/>vMax;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1ae3c797ea09227486617f837045db17ce" kindref="member">positionOut</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1af7e0be223ca11bc5e95332a223a5a410" kindref="member">Ka</ref><sp/>=<sp/>Ka;</highlight><highlight class="comment">//<sp/>0.015;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref>[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref>[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref>[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref>[4]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1a1f006058637a82726360f71ab3396f0e" kindref="member">t1</ref><sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1aa931d62492a0ef5a5a1ff1a2ed78d9c6" kindref="member">t2</ref><sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref><sp/>=<sp/>cycleTime;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>controller-&gt;<ref refid="structmotion_profiler_1a519d6d21d377d231f1c947d83de92841" kindref="member">positionCycles</ref><sp/>=<sp/>positionCycles;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="motion_planner_8c_1ad6e45f67f53a6a3eec3fbd3c0e03d9e7" kindref="member">pidInit</ref><sp/>(controller-&gt;<ref refid="structmotion_profiler_1a6af58c8bbf5ff2a9657b3003a6521db0" kindref="member">positionController</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/>30,<sp/>150);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="motion_planner_8c_1ad6e45f67f53a6a3eec3fbd3c0e03d9e7" kindref="member">pidInit</ref><sp/>(controller-&gt;<ref refid="structmotion_profiler_1a731ffc5dde37d1e3bb373311c7f84d61" kindref="member">velocityController</ref>,<sp/>127.0/vMax,<sp/>0,<sp/>0,<sp/>50,<sp/>500);</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><ref refid="motion_planner_8c_1a1b9b6097dd7e4e65093c30e080a19ef1" kindref="member">createMotionProfile</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>motorPort,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sensor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vMax)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>createMotionProfiler<sp/>(motorPort,<sp/>sensor,<sp/>vMax,<sp/>0.0,<sp/>600,<sp/>300,<sp/>25,<sp/>4);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><ref refid="motion_planner_8c_1a30ce5d795dc46d722f83c97fde8d3198" kindref="member">setPositionController</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>motorPort,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Ki,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kd,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>innerBand,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>outerBand)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[motorPort]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/>*profile<sp/>=<sp/>motorController<sp/>[motorPort];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="motion_planner_8c_1ad6e45f67f53a6a3eec3fbd3c0e03d9e7" kindref="member">pidInit</ref><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a6af58c8bbf5ff2a9657b3003a6521db0" kindref="member">positionController</ref>,<sp/>Kp,<sp/>Ki,<sp/>Kd,<sp/>innerBand,<sp/>outerBand);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><ref refid="motion_planner_8c_1a84c067f5b749396c97f339e18b3916dd" kindref="member">setVelocityController</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>motorPort,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kp,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Ki,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Kd,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>innerBand,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>outerBand)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[motorPort]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/>*profile<sp/>=<sp/>motorController<sp/>[motorPort];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="motion_planner_8c_1ad6e45f67f53a6a3eec3fbd3c0e03d9e7" kindref="member">pidInit</ref><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a731ffc5dde37d1e3bb373311c7f84d61" kindref="member">velocityController</ref>,<sp/>Kp,<sp/>Ki,<sp/>Kd,<sp/>innerBand,<sp/>outerBand);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><ref refid="motion_planner_8c_1a98a294f0bd0e05a06e4b3ce91fd3b768" kindref="member">setMotionSlave</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>motorPort,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>masterPort)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[masterPort]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>motorController<sp/>[motorPort]<sp/>=<sp/>motorController<sp/>[masterPort];</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><ref refid="motion_planner_8c_1a14723e38e593eefa92500a993303da0c" kindref="member">setPosition</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>motorPort,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[motorPort]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/>*profile<sp/>=<sp/>motorController<sp/>[motorPort];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>position<sp/>-<sp/>*(profile-&gt;<ref refid="structmotion_profiler_1ac45c58330bcdae28978c77a6cfde8f72" kindref="member">sensor</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a3d25457e1add6ee8836d29f078e7cc1b" kindref="member">t4</ref><sp/>=<sp/>1000<sp/>*<sp/>fabs<sp/>(distance)<sp/>/<sp/>profile-&gt;<ref refid="structmotion_profiler_1a939c9510d8065a680fb9390dc98c89d9" kindref="member">vMax</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a3d25457e1add6ee8836d29f078e7cc1b" kindref="member">t4</ref><sp/>&lt;<sp/>profile-&gt;<ref refid="structmotion_profiler_1a1f006058637a82726360f71ab3396f0e" kindref="member">t1</ref><sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa931d62492a0ef5a5a1ff1a2ed78d9c6" kindref="member">t2</ref>)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//short<sp/>movement<sp/>profile,<sp/>not<sp/>implemented<sp/>yet...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1af1c26d55aae953850de4497090f96033" kindref="member">profileSetting</ref><sp/>=<sp/>0b11;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a49d3333b9018fe1b2454e56c30a72311" kindref="member">finalPosition</ref><sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a8b70c4e6e7bfb03961f944751725e6f2" kindref="member">tMax</ref><sp/>=<sp/>profile-&gt;<ref refid="structmotion_profiler_1a1f006058637a82726360f71ab3396f0e" kindref="member">t1</ref><sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa931d62492a0ef5a5a1ff1a2ed78d9c6" kindref="member">t2</ref><sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1a3d25457e1add6ee8836d29f078e7cc1b" kindref="member">t4</ref>;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ad12385a16c1e70621af252dc46ddd611" kindref="member">jerk</ref><sp/>=<sp/>sgn<sp/>(distance)<sp/>*<sp/>profile-&gt;<ref refid="structmotion_profiler_1a939c9510d8065a680fb9390dc98c89d9" kindref="member">vMax</ref>/(profile-&gt;<ref refid="structmotion_profiler_1a1f006058637a82726360f71ab3396f0e" kindref="member">t1</ref>/1000.0)/(profile-&gt;<ref refid="structmotion_profiler_1aa931d62492a0ef5a5a1ff1a2ed78d9c6" kindref="member">t2</ref>/1000.0);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3f53b386932f91b87cfd744c4532603" kindref="member">accelSet</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1abecf199e03d7c61b7694435888364aaf" kindref="member">velocitySet</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae45782f37eaa20c9ccb117874abc7ff2" kindref="member">positionSet</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a8b7b1cd195d2ce0981b7d4e85675896a" kindref="member">planComplete</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><ref refid="motion_planner_8c_1a22e3be616dbc3c49d64c1be6c3d912fa" kindref="member">setPWMOutput</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>motorPort,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[motorPort]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>&gt;<sp/>127)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output<sp/>&lt;<sp/>-127)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>-127;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>motorController[motorPort]-&gt;<ref refid="structmotion_profiler_1af1c26d55aae953850de4497090f96033" kindref="member">profileSetting</ref><sp/>=<sp/>0b00;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>motorController[motorPort]-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>output;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><ref refid="motion_planner_8c_1a6bfe725c4f5986245fba04d84ba9a725" kindref="member">setVelocity</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>motorPort,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>velocity)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[motorPort]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/>*profile<sp/>=<sp/>motorController[motorPort];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1af1c26d55aae953850de4497090f96033" kindref="member">profileSetting</ref><sp/>=<sp/>0b10;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1abecf199e03d7c61b7694435888364aaf" kindref="member">velocitySet</ref><sp/>=<sp/>velocity;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">updateMotors<sp/>()<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[i]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[i]-&gt;motorOutput<sp/>&gt;<sp/>127)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motorController<sp/>[i]-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motorController<sp/>[i]-&gt;motorOutput<sp/>&lt;<sp/>-127)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motorController<sp/>[i]-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>-127;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor[i]<sp/>=<sp/>sgn(motorController<sp/>[i]-&gt;motorOutput)<sp/>*<sp/><ref refid="motion_planner_8c_1a229bfa76ac5d7171767faff966659a13" kindref="member">TrueSpeed</ref>[(int)<sp/>fabs<sp/>(motorController<sp/>[i]-&gt;motorOutput)];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">measureVelocity<sp/>(<ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/>*profile)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaT<sp/>=<sp/>(nPgmTime<sp/>-<sp/>profile-&gt;<ref refid="structmotion_profiler_1ab17786ea0ccd57d2b527d06143e22c15" kindref="member">lastTime</ref>)/1000.0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ab17786ea0ccd57d2b527d06143e22c15" kindref="member">lastTime</ref><sp/>=<sp/>nPgmTime;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sensorV<sp/>=<sp/>*(profile-&gt;<ref refid="structmotion_profiler_1ac45c58330bcdae28978c77a6cfde8f72" kindref="member">sensor</ref>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>sensor<sp/>velocity,<sp/>ticks<sp/>per<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sensorRate<sp/>=<sp/>(sensorV<sp/>-<sp/>profile-&gt;<ref refid="structmotion_profiler_1a0f19b669e85c8c71ac80e985351be173" kindref="member">lastSensorValue</ref>)<sp/>/<sp/>deltaT;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>4;<sp/>j<sp/>&gt;<sp/>0;<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref><sp/>[j]<sp/>=<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref><sp/>[j-1];</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref><sp/>[0]<sp/>=<sp/>sensorRate;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>sensorRate<sp/>=<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref><sp/>[0]<sp/>*<sp/>0.5<sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref><sp/>[1]<sp/>*<sp/>0.25<sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref><sp/>[2]<sp/>*<sp/>0.125<sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref><sp/>[3]<sp/>*<sp/>0.0625<sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa5d8685398a6a8a736ee930be4de1d64" kindref="member">velocityFilter</ref><sp/>[4]<sp/>*<sp/>0.0625;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1abab91ecaedaa0da8ff8efb499269ff0a" kindref="member">velocityRead</ref><sp/>=<sp/>sensorRate;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a0f19b669e85c8c71ac80e985351be173" kindref="member">lastSensorValue</ref><sp/>=<sp/>sensorV;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">velocityUpdate<sp/>(<ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/>*profile)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//do<sp/>velocity<sp/>PID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocityOut<sp/>=<sp/><ref refid="motion_planner_8c_1acb752ade99450cfce2f7e7ad3f80e9c6" kindref="member">pidCalculateVelocity</ref><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a731ffc5dde37d1e3bb373311c7f84d61" kindref="member">velocityController</ref>,<sp/>profile-&gt;<ref refid="structmotion_profiler_1abecf199e03d7c61b7694435888364aaf" kindref="member">velocitySet</ref>,<sp/>profile-&gt;<ref refid="structmotion_profiler_1abab91ecaedaa0da8ff8efb499269ff0a" kindref="member">velocityRead</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>motor<sp/>PWM<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>velocityOut;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>&gt;<sp/>127)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>&lt;<sp/>-127)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>-127;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">positionUpdate<sp/>(<ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/>*profile)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>motion<sp/>profile<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a8b7b1cd195d2ce0981b7d4e85675896a" kindref="member">planComplete</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>&lt;<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa931d62492a0ef5a5a1ff1a2ed78d9c6" kindref="member">t2</ref><sp/>/<sp/>profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//J+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3f53b386932f91b87cfd744c4532603" kindref="member">accelSet</ref><sp/>+=<sp/>profile-&gt;<ref refid="structmotion_profiler_1ad12385a16c1e70621af252dc46ddd611" kindref="member">jerk</ref><sp/>*<sp/>(profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>/1000.0);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>&gt;=<sp/>profile-&gt;<ref refid="structmotion_profiler_1a1f006058637a82726360f71ab3396f0e" kindref="member">t1</ref><sp/>/<sp/>profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref><sp/>&amp;&amp;<sp/>profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>&lt;<sp/>(profile-&gt;<ref refid="structmotion_profiler_1a1f006058637a82726360f71ab3396f0e" kindref="member">t1</ref><sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa931d62492a0ef5a5a1ff1a2ed78d9c6" kindref="member">t2</ref>)<sp/>/<sp/>profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//J-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3f53b386932f91b87cfd744c4532603" kindref="member">accelSet</ref><sp/>-=<sp/>profile-&gt;<ref refid="structmotion_profiler_1ad12385a16c1e70621af252dc46ddd611" kindref="member">jerk</ref><sp/>*<sp/>(profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>/1000.0);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>&gt;=<sp/>profile-&gt;<ref refid="structmotion_profiler_1a3d25457e1add6ee8836d29f078e7cc1b" kindref="member">t4</ref><sp/>/<sp/>profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref><sp/>&amp;&amp;<sp/>profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>&lt;<sp/>(profile-&gt;<ref refid="structmotion_profiler_1a3d25457e1add6ee8836d29f078e7cc1b" kindref="member">t4</ref><sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1aa931d62492a0ef5a5a1ff1a2ed78d9c6" kindref="member">t2</ref>)<sp/>/<sp/>profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//J-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3f53b386932f91b87cfd744c4532603" kindref="member">accelSet</ref><sp/>-=<sp/>profile-&gt;<ref refid="structmotion_profiler_1ad12385a16c1e70621af252dc46ddd611" kindref="member">jerk</ref><sp/>*<sp/>(profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>/1000.0);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>&gt;=<sp/>(profile-&gt;<ref refid="structmotion_profiler_1a3d25457e1add6ee8836d29f078e7cc1b" kindref="member">t4</ref><sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1a1f006058637a82726360f71ab3396f0e" kindref="member">t1</ref>)<sp/>/<sp/>profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref><sp/>&amp;&amp;<sp/>profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>&lt;<sp/>profile-&gt;<ref refid="structmotion_profiler_1a8b70c4e6e7bfb03961f944751725e6f2" kindref="member">tMax</ref>)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//J+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3f53b386932f91b87cfd744c4532603" kindref="member">accelSet</ref><sp/>+=<sp/>profile-&gt;<ref refid="structmotion_profiler_1ad12385a16c1e70621af252dc46ddd611" kindref="member">jerk</ref><sp/>*<sp/>(profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>/1000.0);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>&lt;<sp/>profile-&gt;<ref refid="structmotion_profiler_1a8b70c4e6e7bfb03961f944751725e6f2" kindref="member">tMax</ref><sp/>/<sp/>profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1abecf199e03d7c61b7694435888364aaf" kindref="member">velocitySet</ref><sp/>+=<sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3f53b386932f91b87cfd744c4532603" kindref="member">accelSet</ref><sp/>*<sp/>(profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>/1000.0);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae45782f37eaa20c9ccb117874abc7ff2" kindref="member">positionSet</ref><sp/>+=<sp/>profile-&gt;<ref refid="structmotion_profiler_1abecf199e03d7c61b7694435888364aaf" kindref="member">velocitySet</ref><sp/>*<sp/>(profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>/1000.0);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1abecf199e03d7c61b7694435888364aaf" kindref="member">velocitySet</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae45782f37eaa20c9ccb117874abc7ff2" kindref="member">positionSet</ref><sp/>=<sp/>profile-&gt;<ref refid="structmotion_profiler_1a49d3333b9018fe1b2454e56c30a72311" kindref="member">finalPosition</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3f53b386932f91b87cfd744c4532603" kindref="member">accelSet</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a8b7b1cd195d2ce0981b7d4e85675896a" kindref="member">planComplete</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref>++;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//do<sp/>position<sp/>PID<sp/>if<sp/>cycle<sp/>includes<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a7568fe510550cda7e14714cb1940ca8f" kindref="member">cycleCounter</ref><sp/>%<sp/>profile-&gt;<ref refid="structmotion_profiler_1a519d6d21d377d231f1c947d83de92841" kindref="member">positionCycles</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3c797ea09227486617f837045db17ce" kindref="member">positionOut</ref><sp/>=<sp/><ref refid="motion_planner_8c_1aea4332a3ded7a93261d8c53e0b83d277" kindref="member">pidCalculateWithVelocitySet</ref><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a6af58c8bbf5ff2a9657b3003a6521db0" kindref="member">positionController</ref>,<sp/>profile-&gt;<ref refid="structmotion_profiler_1ae45782f37eaa20c9ccb117874abc7ff2" kindref="member">positionSet</ref>,<sp/>*(profile-&gt;<ref refid="structmotion_profiler_1ac45c58330bcdae28978c77a6cfde8f72" kindref="member">sensor</ref>),<sp/>profile-&gt;<ref refid="structmotion_profiler_1abecf199e03d7c61b7694435888364aaf" kindref="member">velocitySet</ref>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//do<sp/>velocity<sp/>PID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>velocityOut<sp/>=<sp/><ref refid="motion_planner_8c_1acb752ade99450cfce2f7e7ad3f80e9c6" kindref="member">pidCalculateVelocity</ref><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a731ffc5dde37d1e3bb373311c7f84d61" kindref="member">velocityController</ref>,<sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3c797ea09227486617f837045db17ce" kindref="member">positionOut</ref><sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1abecf199e03d7c61b7694435888364aaf" kindref="member">velocitySet</ref>,<sp/>profile-&gt;<ref refid="structmotion_profiler_1abab91ecaedaa0da8ff8efb499269ff0a" kindref="member">velocityRead</ref>)<sp/>+<sp/>profile-&gt;<ref refid="structmotion_profiler_1ae3f53b386932f91b87cfd744c4532603" kindref="member">accelSet</ref><sp/>*<sp/>profile-&gt;<ref refid="structmotion_profiler_1af7e0be223ca11bc5e95332a223a5a410" kindref="member">Ka</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//float<sp/>velocityOut<sp/>=<sp/><sp/>profile-&gt;velocitySet<sp/>*<sp/>profile-&gt;Kv<sp/>+<sp/>profile-&gt;accelSet<sp/>*<sp/>profile-&gt;Ka;//pidCalculate<sp/>(profile-&gt;velocityController,<sp/>profile-&gt;velocitySet<sp/>+<sp/>profile-&gt;positionOut,<sp/>profile-&gt;velocityRead);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>motor<sp/>PWM<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>velocityOut;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>&gt;<sp/>127)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>&lt;<sp/>-127)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>profile-&gt;<ref refid="structmotion_profiler_1a596a165e0e260065d862d418d84c7f6b" kindref="member">motorOutput</ref><sp/>=<sp/>-127;</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal">task<sp/>rawSensorMonitor<sp/>()<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>20;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="motion_planner_8c_1a228e60e820f1596a54d9bd830adf2fe6" kindref="member">rawSensorValue</ref><sp/>[i]<sp/>=<sp/>SensorValue<sp/>[i];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">task<sp/>motionPlanner<sp/>()<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>startTask<sp/>(rawSensorMonitor);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uniqueControllers<sp/>[i]<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmotion_profiler" kindref="compound">motionProfiler</ref><sp/>*profile<sp/>=<sp/>uniqueControllers<sp/>[i];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPgmTime<sp/>-<sp/>profile-&gt;<ref refid="structmotion_profiler_1ab17786ea0ccd57d2b527d06143e22c15" kindref="member">lastTime</ref><sp/>&lt;<sp/>profile-&gt;<ref refid="structmotion_profiler_1a937382b7ba919b74e49bb7686a3b86c6" kindref="member">cycleTime</ref>)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measureVelocity<sp/>(profile);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1af1c26d55aae953850de4497090f96033" kindref="member">profileSetting</ref><sp/>==<sp/>0b11)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positionUpdate<sp/>(profile);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(profile-&gt;<ref refid="structmotion_profiler_1af1c26d55aae953850de4497090f96033" kindref="member">profileSetting</ref><sp/>==<sp/>0b10)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocityUpdate<sp/>(profile);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateMotors<sp/>();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="motionPlanner.c"/>
  </compounddef>
</doxygen>
